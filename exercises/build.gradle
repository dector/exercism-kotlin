/**
 * This creates new configuration with name "starterSource" that is testing exercises sources agains provided tests.
 *
 * If `-PsourcesDir` is provided - this directory will be used as location of Kotlin source files.
 * Else reference solution sources will be used.
 *
 * Examples:
 *   - `./gradlew test` - will run tests for reference solutions for all exercises.
 *   - `./gradlew :hello-world:test` - will run tests for the reference solution only for `hello-world` exercise.
 *   - `./gradlew -PsourcesDir=~/exercism/kotlin/hello-world/src/main/kotlin`.
 */

subprojects {
  afterEvaluate { Project project ->

    configurations {
      starterSourceCompile.extendsFrom compile
      starterSourceRuntime.extendsFrom runtime

      exerciseTestsCompile.extendsFrom testCompile
      exerciseTestsRuntime.extendsFrom testRuntime
    }

    sourceSets {
      // Verify that the tests are working by running them against the reference solution.
      // By replacing the "main" sourceSet with the reference solution we avoid any collisions
      // with solution code that may have been included as a "starter" (e.g. etl).
      main {
        String sourcesDir
        try {
          sourcesDir = project.property("sourcesDir")
        } catch (MissingPropertyException e) {
          sourcesDir = ".meta/src/reference/kotlin"
        }

        kotlin.srcDirs = [sourcesDir]
      }
      project["compileKotlin"].doFirst { compileTask ->
        println "  (source = " + compileTask.source.asPath + ")"
      }

      starterSource {
        kotlin.srcDirs = ["src/main/kotlin"]
      }
      project["compileStarterSourceKotlin"].doFirst { compileTask ->
        println "  (source = " + compileTask.source.asPath + ")"
      }

      exerciseTests {
        kotlin {
          srcDirs = ["src/test/kotlin"]
          compileClasspath += main.output
          runtimeClasspath += main.output
        }
      }

      // In lieu of being able to disable @Ignore in JUnit tests, we filter
      // those annotations, placing the edited tests in the path named here.
      test {
        kotlin.srcDirs = ["build/gen/test/kotlin"]
      }
      project["compileTestKotlin"].doFirst { compileTask ->
        println "  (test source = " + compileTask.source.asPath + ")"
      }
    }

    // Note that journey-test.sh also strips @Ignore annotations using sed. The
    // stripping implementations here and in journey-test.sh should be kept
    // consistent.
    task copyTestsFilteringIgnores(type: Copy) {
      from "src/test/kotlin"
      into "build/gen/test/kotlin"
      filter { line -> line.contains("@Ignore") ? "" : line }
    }

    compileTestKotlin.dependsOn(copyTestsFilteringIgnores)
  }
}
